// Jenkins File for Dockerizing an Application

pipeline {
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner' // Name should be same as System Settings in Jenkins
        GIT_REPO_NAME = '' // Repo for Manifest File
        GIT_USER_NAME = ''
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: ''
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName='ProjectName' -Dsonar.projectKey='ProjectKey'
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: '<sonar-creds>'
                }
            }
        }

        stage('NPM') {
            steps {
                sh 'npm install'
            }
        }

        stage('Trivy FS') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: '<docker-creds-name>', toolName: 'docker') {
                        sh '''
                            docker build -t anuragpocv1 .
                            docker tag anuragpocv1 anuragpoc/anuragpocv1:latest
                            docker push anuragpoc/anurapocv1:latest
                        '''
                    }
                }
            }
        }

        stage('Trivy Image') {
            steps {
                sh 'trivy image anuragpoc/anuragpocv1:latest > trivyimage.txt'
            }
        }

        stage('Checkout Deployment Manifest') {
            steps {
                git branch: 'main', url: '' // To be used if Manifest is another repo
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {          // credential name set in Jenkins to be passed here
                    NEW_IMAGE_NAME = "anuragpoc/anuragpocvn:latest"

                    sh "sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' deployment.yml"

                    sh 'git add deployment.yml'
                    sh "git commit -m 'Update Deployment Image to $NEW_IMAGE_NAME'"
                    sh "git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"
                }
            }
        }

        // Optional : This is used to Trigger Another Jenkins Pipeline once all Stages gets executed here.
        // If Above 2 stages are part of another pipeline
        stage('Trigger Manifest Pipeline') {
            steps {
                build job: '<Pipeline_Name>', wait:true
            }
        }

    }
}